ext {
    libraries = [
            slf4j        : '1.7.25',
            jsr330       : '1',
            jsr250       : '1.3.2',
            javassist    : '3.26.0-GA',
            cglib        : '3.3.0',
            objenesis    : '3.1',
            aspectjweaver: '1.9.4',
            snakeyaml    : '1.25',
            vertx        : '3.8.4',
            hessian      : '4.0.63',
            joda         : '2.10.5',
            jackson      : '2.10.2'
    ]
}

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.shadow_version = '5.2.0'
    ext.dokka_version = '0.10.1'
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

allprojects {
    group = 'com.github.bdqfork'
    version = '0.5.0'
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'

    repositories {
        mavenLocal()
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.25'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'ch.qos.logback:logback-core:1.2.3'
        testImplementation 'junit:junit:4.12'
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    task generateSourcesJar(type: Jar) {
        group = 'jar'
        from sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = "javadoc"
        outputDirectory = javadoc.destinationDir
    }

    task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
        group = 'jar'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact generateSourcesJar
                artifact generateJavadoc
                pom {
                    name = project.name
                    url = 'https://github.com/bdqfork/festival'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'bdqfork'
                            email = 'bdqsky@163.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:bdqfork/festival.git'
                        developerConnection = 'scm:git:git@github.com:bdqfork/festival.git'
                        url = 'https://github.com/bdqfork/festival'
                    }
                }

            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                if (hasProperty("ossrh_key") && hasProperty("ossrh_pass")) {
                    credentials {
                        username ossrh_key
                        password ossrh_pass
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}